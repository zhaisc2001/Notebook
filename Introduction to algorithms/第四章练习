4.1-1:返回首元素；

4.1-2:
暴力求解
#include<iostream>
#include<vector>

using namespace std;

void FIND_MAXIMUM_SUBARRAY(vector<int> &A,vector<int> &B){
    int max_sum = INT_MIN;
    for (auto i=0; i!=A.size(); i++) {
        int sum = 0;
        for (auto j=i; j!=A.size();j++){
            sum += A[j];
            if(sum>max_sum){max_sum=sum;B[0]=i;B[1]=j;}
        }
    }
    B[2]=max_sum;
}

int main(){
    vector<int> A = {3,-4,2,6,7};
    vector<int> B = {0,0,0};
    FIND_MAXIMUM_SUBARRAY(A, B);
    for(auto &i:B){cout<<i<<endl;}
    return 0;
}

4.1-3:
#include<iostream>
#include<vector>

using namespace std;

vector<int> FIND_MAX_CEOSSING_SUBARRAY(vector<int> &A,vector<int> &B,int low,int mid,int high){
    int left_sum = INT_MIN;
    int sum = 0;
    int max_left = 0;
    int max_right = 0;
    for (auto i = mid;i>=low;--i){
        sum+=A[i];
        if (sum>left_sum){left_sum=sum;max_left=i;}
    }
    int right_sum = INT_MIN;
    sum = 0;
    for(auto j = mid+1;j<=high;++j){
        sum+=A[j];
        if(sum>right_sum){right_sum=sum;max_right=j;}
    }
    B[0]=max_left;
    B[1]=max_right;
    B[2]=left_sum+right_sum;
    return B;
}

vector<int> FIND_MAXIMUM_SUBARRAY(vector<int> &A,int low,int high){
    vector<int> B = {0,0,0};
    vector<int> left_B (B);
    vector<int> right_B (B);
    vector<int> cross_B (B);
    if (high==low){B[0]=low;B[1]=high;B[2]=A[low];return B;}
    else{
        int mid = (low+high)/2;
        left_B = FIND_MAXIMUM_SUBARRAY(A, low, mid);
        right_B = FIND_MAXIMUM_SUBARRAY(A, mid+1, high);
        cross_B = FIND_MAX_CEOSSING_SUBARRAY(A, B, low, mid, high);
        if (left_B[2]>=right_B[2]&&left_B[2]>=cross_B[2]) {
            return left_B;
        }
        else if (right_B[2]>=left_B[2]&&right_B[2]>=cross_B[2]){
            return right_B;
        }
        else {return cross_B;}
    }
}

int main(){
    vector<int> A = {3,-4,2,6,7};
    auto B = FIND_MAXIMUM_SUBARRAY(A, 0, 4);
    for(auto &i:B){cout<<i<<endl;}
    return 0;
}
求解的是一个2^(cn)=n这样一个超越方程，c因计算机不同和程序设计的不同而不同；
修改后性能交叉点是不会变的；

4.1-4:
在返回时添加if判断，如果和为负数那么就返回空数组以及0；

4.1-5:
#include<iostream>
#include<vector>

using namespace std;

void FIND_MAX_SUBARRAY(vector<int> &A,vector<int> &B){
    vector<int> C = {0,0,0};
    int sum = 0;
    int max_sum = INT_MIN;
    for (auto i = 0;i<A.size();++i){
        if(A[i]>0){sum+=A[i];C[1]=i;C[2]=sum;}
        else{sum=0;C[0]=i+1;C[2]=sum;}
        if(sum>max_sum){
            B = C;
        }
    }
}

int main(){
    vector<int> A = {3,-4,2,6,7};
    vector<int> B = {0,0,0};
    FIND_MAX_SUBARRAY(A, B);
    for(auto &i:B){cout<<i<<endl;}
    return 0;
}

4.2-1:
依照书中给出的Strassen算法进行计算：先算10个s，再算7个p，再算4个c搞定。最后得出结果[[18 14],[62,66]]

4.2-2:
Strassen(A,B):
let C be a new nxn matrix
if A.row == 1:
C = A * B
else partition A,B,and C
S1=B12-B22
S2=A11-A12
S3=A21+A22
S4=B21-B11
S5=A11+A22
S6=B11+B22
S7=A12-A22
S8=B21+B22
S9=A11-A21
S10=B11+B12
P1=Strassen(A11,S1)
P2=Strassen(A11,B22)
P3=Strassen(S3,B11)
P4=Strassen(A22,S4)
P5=Strassen(S5,S6)
P6=Strassen(S7,S8)
P7=Strassen(S9,S10)
C11=P5+P4-P2+P6
C12=P1+P2
C21=P3+P4
C22=P5+P1-P3-P7
return C

4.2-3:
可以通过paddling，将矩阵规模n补齐称为2的幂，此时易证算法运行时间为theta(n^lg7)；

4.2-4:
由题意可得递推式：T(n)=kT(n/3)+theta(n);
当k足够大时，我们可以使得n=O(n^log3(k))，此时我们需要解不等式log3(k)<lg7->k<3^(lg7);

4.2-5:
使用分治法，就是比较log68(132464),log70(143640),log72(155424)的大小，最小的事log70(143640)≈2.795122;
lg7≈2.807,这样的算法时快于Strassen算法的；

4.2-6:
kn*n和n*kn相乘，在n^2的基础上需要k^2次乘法；
n*kn和kn*n相乘，需要k次乘法和k-1次加法；

4.2-7:
#include<iostream>
#include<vector>

using namespace std;

vector<int> complex_multiple(int a,int b,int c,int d){
    vector<int> A = {0,0};
    int e = (a+b)*(c+d);
    int f = a*c;
    int g = b*d;
    A[0] = f-g;
    A[1] = e-f-g;
    return A;
}

int main(){
    auto a = complex_multiple(1, 2, 3, 4);
    for(auto &i:a){cout<<i<<endl;}
    return 0;
}

4.3-1:当c=1时，我们代入可以得到n≥1时，T(n)≤n^2恒成立；

4.3-2:猜测其上界为clg(n-2)，代入可得
T(n)≤clg(⌈n/2⌉−2)+1≤clg(n/2+1−2)+1≤clg((n−2)/2)+1≤clg(n−2)−clg2+1≤clg(n−2)

求解递推式的三种方法以及主定理的证明不打算学习了；
