15.1:虚成员就是虚函数；

15.2:protected允许该类及其派生类访问，private只允许该类访问；

15.3:#include<iostream>
#include<string>

using namespace std;

class Quote{
public:
    Quote()=default;
    Quote(const string &book,double sales_price) : bookNo(book),price(sales_price){}
    string isbn() const {return bookNo;}
    virtual double net_price(size_t n) const {return n*price;}
    virtual ~Quote() = default;
private:
    string bookNo;
protected:
    double price = 0.0;
};

class Bulk_quote:public Quote{
public:
    double net_price(size_t) const override;
};

double print_total(ostream &os,const Quote &item,size_t n){
    double ret = item.net_price(n);
    os<<"ISBN:"<<item.isbn()<<"# sold:"<<n<<"total due:"<<ret<<endl;
    return ret;
}

int main() {
    return 0;
}

15.4:
(a)False,一个类不能是自己的派生类；
(b)正确
(c)错误，派生类的声明不能包含派生列表；

15.6:
#include<iostream>
#include<string>

using namespace std;

class Quote{
public:
    Quote()=default;
    Quote(const string &book,double sales_price) : bookNo(book),price(sales_price){}
    string isbn() const {return bookNo;}
    virtual double net_price(size_t n) const {return n*price;}
    virtual ~Quote() = default;
private:
    string bookNo;
protected:
    double price = 0.0;
};

class Bulk_quote:public Quote{
public:
    Bulk_quote(const string &book,double p,size_t qty,double disc):
    Quote(book,p),min_qty(qty),discount(disc) { }
    double net_price(size_t) const override;
private:
    size_t min_qty = 0;
    double discount = 0.0;
};

double print_total(ostream &os,const Quote &item,size_t n){
    double ret = item.net_price(n);
    os<<"ISBN:"<<item.isbn()<<"# sold:"<<n<<" total due:"<<ret<<endl;
    return ret;
}

double Bulk_quote::net_price(size_t cnt) const {
    if(cnt >= min_qty){return cnt*(1-discount)*price;}
    else{return cnt*price;}
}

int main() {
    Quote Dragon_Raja("Dragon raja",44.8);
    Bulk_quote Dragon("Dragon raja",44.8,10,0.23);
    print_total(cout, Dragon_Raja, 15);
    print_total(cout, Dragon, 17);
    return 0;
}

15.7:
#include<iostream>
#include<string>

using namespace std;

class Quote{
public:
    Quote()=default;
    Quote(const string &book,double sales_price) : bookNo(book),price(sales_price){}
    string isbn() const {return bookNo;}
    virtual double net_price(size_t n) const {return n*price;}
    virtual ~Quote() = default;
private:
    string bookNo;
protected:
    double price = 0.0;
};

class Bulk_quote:public Quote{
public:
    Bulk_quote(const string &book,double p,size_t qty_1,size_t qty_2,double disc):
    Quote(book,p),min_qty(qty_1),max_qty(qty_2),discount(disc) { }
    double net_price(size_t) const override;
private:
    size_t min_qty = 0;
    size_t max_qty = 0;
    double discount = 0.0;
};

double print_total(ostream &os,const Quote &item,size_t n){
    double ret = item.net_price(n);
    os<<"ISBN:"<<item.isbn()<<"# sold:"<<n<<" total due:"<<ret<<endl;
    return ret;
}

double Bulk_quote::net_price(size_t cnt) const {
    if(cnt >= min_qty && cnt <= max_qty){return cnt*discount*price;}
    else if (cnt > max_qty){return (cnt-max_qty)*price+max_qty*discount*price;}
    else{return cnt*price;}
}

int main() {
    Quote Dragon_Raja("Dragon raja",44.8);
    Bulk_quote Dragon("Dragon raja",44.8,10,15,0.77);
    print_total(cout, Dragon_Raja, 15);
    print_total(cout, Dragon, 17);
    return 0;
}

15.8:变量被声明时的类型或表达式生成的类型：静态类型；
变量或表达式指向的内存：动态类型；

15.9:基类的引用或指针，动态类型与静态类型分离；

15.10:动态绑定：ifstream是istream的派生类；

15.12:有必要，我们可以对一个派生类的虚函数进行覆盖基类同时禁止这个派生类的派生类的虚函数覆盖的操作；

15.15:
class Disc_quote : public Quote{
public:
    Disc_quote()=default;
    Disc_quote(const string& book,double price,size_t qty,double disc):
    Quote(book,price),quantity(qty),discount(disc) { }
    double net_price(size_t) const = 0;
protected:
    size_t quantity = 0;
    double discount = 0.0;
};

15.17:Variable type 'Disc_quote' is an abstract class

15.18:
不能对不可访问的基类进行转换；

15.19:
1： 假定B继承自A，无论B以什么方式继承A，B的成员函数和友元都能使用派生类到基类的转换
2： B继承A的方式是公有或者保护，则B的派生类的成员或友元可以使用B到A的转换，若未私有则不行
3： B继承A的方式是公有的，用户的代码才能使用B到A的（派生类到基类）的转换，保护或者私有方式则不行

15.24:
基类，动态删除基类指针；

15.25:派生类的基类的默认构造函数是不可访问的或删除的，派生类的默认构造函数也是删除的，此时会导致派生类的默认
初始化时报错；

15.29:不一致，原因是之前容器仅仅将派生类的基类部分传入容器；

15.30:
class Basket{
public:
    void add_item(const Quote &sale) {items.insert(shared_ptr<Quote>(sale.clone()));}
    void add_item(Quote&& sale) {items.insert(shared_ptr<Quote>(std::move(sale).clone()));}
    double total_receipt(ostream&) const;
private:
    static bool compare(const shared_ptr<Quote> &lhs, const shared_ptr<Quote> &rhs)
    {return lhs->isbn() < rhs->isbn();}
    multiset<shared_ptr<Quote>,decltype(compare)*> items{compare};
};

double Basket::total_receipt(ostream &os) const{
    double sum = 0.0;
    for (auto iter = items.cbegin();iter!=items.cend();iter=items.upper_bound(*iter)){
        sum += print_total(os, **iter, items.count(*iter));
    }
    os<<"Total Sale:"<<sum<<endl;
    return sum;
}

int main(){
    return 0;
}

