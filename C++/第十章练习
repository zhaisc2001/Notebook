10.1ï¼Œ10.2:
#include<iostream>
#include<vector>
#include<list>
#include<algorithm>
#include<string>

using namespace std;

int main() {
    vector<int> vec_int = {1,2,3,4,5,6,7,8,8,8,8};
    list<string> li_str = {"a","b","c","a"};
    cout<<count(vec_int.begin(), vec_int.end(), 8)<<endl;;
    cout<<count(li_str.begin(),li_str.end(),"a")<<endl;
    return 0;
}

10.3:
#include<iostream>
#include<vector>
#include<algorithm>
#include<numeric>

using namespace std;

int main() {
    vector<int> vec_int = {1,2,3,4,5,6,7,8,8,8,8};
    int sum = accumulate(vec_int.begin(),vec_int.end(),0);
    cout<<sum<<endl;
    return 0;
}

10.6:
#include<iostream>
#include<vector>
#include<algorithm>
#include<numeric>

using namespace std;

int main() {
    vector<int> vec_int = {1,2,3,4,5,6,7,8,8,8,8};
    fill_n(vec_int.begin(),sizeof(vec_int),0);
    for(auto &j:vec_int){cout<<j<<endl;}
    return 0;
}

10.9:
#include<iostream>
#include<vector>
#include<algorithm>
#include<numeric>
#include<string>

using namespace std;

void elimDups(vector<string> &words)
{
    auto words_end = unique(words.begin(),words.end());
    words.erase(words_end,words.end());
}

int main() {
    vector<string> vec_str = {"the","quick","red","fox","jumps","over","the","slow","red","turtle"};
    elimDups(vec_str);
    for(auto &j:vec_str){cout<<j<<endl;}
    return 0;
}

10.11:
#include<iostream>
#include<vector>
#include<algorithm>
#include<numeric>
#include<string>

using namespace std;

void elimDups(vector<string> &words)
{
    auto words_end = unique(words.begin(),words.end());
    words.erase(words_end,words.end());
}

bool isShorter(const string &a,const string &b)
{
    return a.size()<b.size();
}

int main() {
    vector<string> vec_str = {"the","quick","red","fox","jumps","over","the","slow","red","turtle"};
    elimDups(vec_str);
    stable_sort(vec_str.begin(),  vec_str.end(), isShorter);
    for(auto &j:vec_str){cout<<j<<endl;}
    return 0;
}

10.13:
#include<iostream>
#include<vector>
#include<algorithm>
#include<numeric>
#include<string>

using namespace std;

bool isFiver(const string &a)
{
    return a.size()<5;
}

int main() {
    vector<string> vec_str = {"the","quick","red","fox","jumps","over","the","slow","red","turtle"};
    auto five = partition(vec_str.begin(), vec_str.end(), isFiver);
    while(five != vec_str.end()){cout<<*five<<endl;++five;}
    return 0;
}

10.14:
[](int &a,int&b){return a+b;};

10.15:
#include<iostream>

using namespace std;

int main() {
    int a = 2;
    auto f = [a](int b){return a+b;};
    cout<<f(2)<<endl;
    return 0;
}
