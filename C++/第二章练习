2.1:
int，short只占据16位内存，long占据32位内存空间，long long占据64位内存空间；
int至少和short一样大，long至少和int一样大，long long至少和long一样大；

无符号类型无法表示负数，而带符号类型可以；

float为精度较低的单精度浮点数，double为精度较高的双精度浮点数；

2.2:
对于这三种数据我认为都应该使用double类型，因为float可能导致精度不够，而long double会导致运算成本过高；

2.3:
32
4294967264
32
-32
0
0

2.4：略
注意第二项是因为unsigned无法表示负数，直接转到unsigned最大值-32了；

2.5:
(a)依次为char,wchar_t,string,wchar_t
(b)int,unsigned int,long,unsigned long,八进制，十六进制
(c)double,float,long double
(d)int,unsigned,double,double

2.6：
第一行是十进制数，第二行是八进制数

2.7:
(a)string;
(b)long double;
(c)float;
(d)long double

2.8:
#include <iostream>
using namespace std;

int main() {
	cout<<"2\x4d"<<endl;
	cout<<"2\t\x4d"<<endl;
	
	return 0;
}

2.9:
(a)非法定义，input_value应该在使用std::cin之前定义；
(b)非法定义，强制转换类型失败，报错信息：error: narrowing conversion of ‘3.1400000000000001e+0’ from ‘double’ to ‘int’.
(c)非法定义，未定义wage的类型；
(d)将i定义为3.14舍去小数部分的整型；

2.10:
string的初值都是" "；
int类型的初值都是0；

2.11:
(a)定义
(b)定义
(c)声明

2.12:
(a)合法；
(b)合法；
(c)非法，变量名中不能使用运算符；
(d)合法；
(e)合法，C++大小写敏感；

2.13:
j = 100

2.14:
合法，会输出：
100 45

2.15:
(a)合法；
(b)非法，引用类型初始值必须是一个对象；
(c)合法；
(d)非法，引用必须初始化；

2.16:
(a)合法；赋值3.14159给d;
(b)合法；赋值0给r2；
(c)赋值0给i;
(d)赋值0给i;

2.17:
10 10

2.18:
#include <iostream>
using namespace std;

int main() {
    int i = 0;
    int *p;
    p = &i;//此处为更改指针的值
    *p = 10;//此处为更改指针所指对象的值
    cout<<i<<endl;
}

2.19:
指针是一个对象，引用不是；
指针在定义时可以不进行初始化，引用不行；
指针可以被赋值和拷贝，而引用不行；

2.20:
将i赋值为42*42

2.21:
(a)非法，dp是一个double*，无法赋给它int*类型的值；
(b)非法，*ip是一个int*，无法赋给它int类型的值；
(c)合法；

2.22:
判断p是否为空指针；
判断p指针所指的值是否为0；

2.23:
不能，对于指针，我们只能判断编译时指针本身是否有问题，比如所指对象有误，但无法判断所指对象是否合法；

2.24:
void*型指针可以被赋给任意类型的指针值，但只能进行有限操作，且无法访问；
int*无法赋给long*型对象；

2.25:
(a)ip:int*，值为0；
   i:int,值为0；
   r:int型引用，值为0；
(b)i:int,值为0；
   ip:int*，值为0；
(c)ip:int*,值为0；
   ip2:int,值为0；
   
2.26:
(a)：不合法，const类型必须初始化；
(b):合法；
(c):合法：
(d):分号前合法，分号后因为sz是const类型，所以不合法；

2.27
(a)非法，int&类型初始化不能是常量字面值；
(b)常量指针；
(c)合法；
(d)合法；
(e)合法：
(f)非法，const前不能加修饰符&;
(g)合法；

2.28:
(a)i为整型，cp为常量int指针;
(b)p1为int*,p2为const int*;
(c)非法，const类型必须要初始化；
(d)非法，理由如c;
(e)非法，理由如上；

2.29:
(a)合法；
(b)合法；
(c)合法;
(d)合法；
(e)非法，const指针无法更改指向的对象；
(f)非法，const int类型无法被赋值；

2.30:
v2顶层const,v1不是const,p1,r1也不是const,p2底层const,p3具备底层和顶层const,r2顶层const;

2.31:
r1 = v2;非法，普通int&无法绑定到一个int常量上
p1 = p2;非法，const int*无法转换成int*类型
p2 = p1;合法，int*类型可以转换成const int*类型
p1 = p3;非法，const int*无法转换成int*类型
p2 = p3;合法
