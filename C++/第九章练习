9.2:
#include<iostream>
#include<list>
#include<deque>

using namespace std;

int main(){
    list<deque<int>> li_de_int;
    return 0;
}

9.4:
#include<iostream>
#include<vector>

using namespace std;

bool find_int(vector<int>::iterator bgn,vector<int>::iterator ed,const int &c)
{
    int b = 0;
    while(bgn!=ed){b = (*bgn==c)?(b+1):b;++bgn;}
    bool a = (b);
    return a;
}

int main(){
    vector<int> v{1,2,3,4,5,6,7,8,7};
    cout<<find_int(v.begin(), v.end(), 10)<<endl;
    return 0;
}

9.5:
#include<iostream>
#include<vector>

using namespace std;

vector<int>::iterator find_int(vector<int>::iterator bgn,vector<int>::iterator ed,const int &c)
{
    vector<int>::iterator i = bgn;
    while(i!=ed)
    {
        if (*i==c) {
            return i;
        }
        else{++i;}
    }
    return ed;
}

int main(){
    vector<int> v{1,2,3,4,5,6,7,8,7};
    cout<<*find_int(v.begin(), v.end(), 123)<<endl;
    return 0;
}

9.13:
#include<iostream>
#include<vector>
#include<list>

using namespace std;

int main(){
    list<int> a = {1,2,3,4,5};
    vector<double> b (a.begin(),a.end());
    for(auto &i:b){cout<<i<<endl;}
    vector<int> c = {1,2,3,4,5,6};
    vector<double> d (c.begin(),c.end());
    for(auto &i:d){cout<<i<<endl;}
    return 0;
}

9.14:
#include<iostream>
#include<vector>
#include<list>

using namespace std;

int main(){
    list<char *> a = {"s","s","b","t"};
    vector<string> b;
    b.assign(a.begin(), a.end());
    for(auto &i:b){cout<<i<<endl;}
    return 0;
}

9.15:
#include<iostream>
#include<vector>
#include<list>

using namespace std;

bool compare(vector<int> a,vector<int> b){
    int c = 0;
    if (a.size() != b.size()){return bool(c);}
    else{
        for(auto i = a.begin(),j = b.begin();i!=a.end();++i,++j){
            if (*i!=*j) {
                return bool(c);
            }
        }
    }
    return bool(c+1);
}

int main(){
    vector<int> a (5,1);
    vector<int> b (5,1);
    cout<<compare(a, b)<<endl;
    vector<int> c (5,2);
    cout<<compare(a, c)<<endl;
    vector<int> d (6,1);
    cout<<compare(a, d)<<endl;
    return 0;
}

9.16:
#include<iostream>
#include<vector>
#include<list>

using namespace std;

bool compare(vector<int> a,list<int> b){
    int c = 0;
    if (a.size() != b.size()){return bool(c);}
    else{
        auto j = b.begin();
        for(auto i = a.begin();i!=a.end();++i,++j){
            if (*i!=*j) {
                return bool(c);
            }
        }
    }
    return bool(c+1);
}

int main(){
    vector<int> a (5,1);
    list<int> b (5,1);
    cout<<compare(a, b)<<endl;
    list<int> c (5,2);
    cout<<compare(a, c)<<endl;
    list<int> d (6,1);
    cout<<compare(a, d)<<endl;
    return 0;
}

9.18:
#include<iostream>
#include<deque>
#include<string>

using namespace std;

int main(){
    deque<string> de_string;
    string s;
    while(cin>>s)
    {
        de_string.push_back(s);
    }
    for(auto &i:de_string){cout<<i<<endl;}
    return 0;
}

9.19:
#include<iostream>
#include<list>
#include<string>

using namespace std;

int main(){
    list<string> de_string;
    string s;
    while(cin>>s)
    {
        de_string.push_back(s);
    }
    for(auto &i:de_string){cout<<i<<endl;}
    return 0;
}

9.24:
#include<iostream>
#include<vector>

using namespace std;

int main(){
    vector<int> vec_int;
    cout<<vec_int.at(0)<<endl;
    cout<<vec_int[0]<<endl;
    cout<<vec_int.front()<<endl;
    cout<<vec_int.back()<<endl;
    return 0;
}

9.26:
#include<iostream>
#include<vector>
#include<list>

using namespace std;

int main(){
    int ia[] = {0,1,1,2,3,5,8,13,21,55,89};
    vector<int> vec_int;
    list<int> li_int;
    for (auto &i:ia){
        vec_int.push_back(i);
        li_int.push_back(i);
    }
    auto i = vec_int.begin();
    while(i!=vec_int.end())
    {
        if(*i%2 == 1){i = vec_int.erase(i);}
        else{++i;}
    }
    auto j = li_int.begin();
    while(j!=li_int.end())
    {
        if(*j%2 != 1){j = li_int.erase(j);}
        else{++j;}
    }
    for(auto &m:vec_int){cout<<m<<endl;}
    cout<<"----------------"<<endl;
    for(auto &m:li_int){cout<<m<<endl;}
    return 0;
}

9.27:
#include<iostream>
#include<forward_list>

using namespace std;

int main(){
    forward_list<int> fl_int = {1,2,3,4,5,6,7,8,9};
    auto prev = fl_int.before_begin();
    auto curr = fl_int.begin();
    while (curr != fl_int.end()) {
        if(*curr %2 == 1){
            curr = fl_int.erase_after(prev);
        }
        else{
            prev = curr;
            ++curr;
        }
    }
    for (auto &i:fl_int){cout<<i<<endl;}
    return 0;
}

9.28:
#include<iostream>
#include<forward_list>
#include<string>

using namespace std;

forward_list<string> find_and_insert(forward_list<string> fl_str,const string a,const string b){
    auto prev = fl_str.before_begin();
    auto curr = fl_str.begin();
    while (curr != fl_str.end()) {
        if (*curr == a) {
            curr = fl_str.insert_after(prev, b);
            return fl_str;
        }
        else {
            prev = curr;
            ++curr;
        }
    }
    curr = fl_str.insert_after(prev, b);
    return fl_str;
};

int main(){
    forward_list<string> fl_str = {"a","b","c","e","f"};
    fl_str = find_and_insert(fl_str, "h", "d");
    for(auto &i:fl_str){cout<<i<<endl;}
}

9.31:#include<iostream>
#include<forward_list>
#include<list>

using namespace std;

int main(){
    forward_list<int> fl_int = {0,1,2,3,4,5,6,7,8,9};
    list<int> li_int = {0,1,2,3,4,5,6,7,8,9};
    auto prev = fl_int.before_begin();
    auto curr = fl_int.begin();
    auto i = li_int.begin();
    while(curr != fl_int.end()){
        if(*curr%2){
            curr = fl_int.insert_after(prev, *curr);
            ++curr;
            prev = curr;
            ++curr;
        }
        else{
            curr = fl_int.erase_after(prev);
        }
    }
    while(i != li_int.end()){
        if(*i%2){
            i = li_int.insert(i, *i);
            ++i;
            ++i;
        }
        else{
            i = li_int.erase(i);
        }
    }
    for(auto &j:fl_int){cout<<j<<endl;}
    for(auto &j:li_int){cout<<j<<endl;}
}

9.41:
#include<iostream>
#include<vector>
#include<string>

using namespace std;

int main(){
    vector<char> vec_ch = {'H','i'};
    string s(vec_ch.begin(),vec_ch.end());
    cout<<s<<endl;
    return 0;
}

9.43:
#include<iostream>
#include<string>

using namespace std;

void func(string &s, string &oldVal, string &newVal) {
	auto iter = s.begin();
	while (iter + oldVal.size() != s.end()) {
		if (oldVal == string(iter, iter + oldVal.size())) {
			iter = s.erase(iter, iter + oldVal.size());
			iter = s.insert(iter, newVal.begin(), newVal.end());
			iter += newVal.size();
		}
		else {
			++iter;
		}
	}
}

int main() {
	string s("though,you don't love me");
	string oldVal("though");
	string newVal("tho");
	func(s, oldVal, newVal);
	cout << s;
	return 0;
}

9.43:
#include<iostream>
#include<string>

using namespace std;

void func(string &s, string &oldVal, string &newVal) {
    auto iter = s.begin();
    while (iter + oldVal.size() != s.end()) {
        if (oldVal == string(iter, iter + oldVal.size())) {
            iter = s.erase(iter, iter + oldVal.size());
            iter = s.insert(iter, newVal.begin(), newVal.end());
            iter += newVal.size();
        }
        else {
            ++iter;
        }
    }
}

int main() {
    string s("though,you don't love me");
    string oldVal("though");
    string newVal("tho");
    func(s, oldVal, newVal);
    cout << s;
    return 0;
}

9.44:
#include<iostream>
#include<string>

using namespace std;

void func(string &s, string &oldVal, string &newVal) {
	string::size_type i = 0;
	auto s_len = s.size(), old_len = oldVal.size();
	while (i + old_len <= s_len) {
		if (oldVal == s.substr(i, i + old_len)) {
			s.replace(i, i + old_len, newVal);
			i += newVal.size();
		}
		else {
			++i;
		}
	}
}
int main() {
	string s("though,you don't love me");
	string oldVal("though");
	string newVal("tho");
	func(s, oldVal, newVal);
	cout << s << endl;

	system("pause");
	return 0;
}

