13.5:
#include<iostream>
#include<string>
#include<fstream>
#include<vector>
#include<sstream>
#include<map>
#include<set>

using namespace std;

class HasPtr {
public:
    HasPtr(const string &s = string()) : ps(new string(s)),i(0) {}
    HasPtr(const HasPtr& hp):ps(new string (*hp.ps)),i(hp.i) {}
private:
    string *ps;
    int i;
};

int main(){
    return 0;
}

13.8:
#include<iostream>
#include<string>
#include<fstream>
#include<vector>
#include<sstream>
#include<map>
#include<set>

using namespace std;

class HasPtr {
public:
    HasPtr(const string &s = string()) : ps(new string(s)),i(0) {}
    HasPtr(const HasPtr& hp):ps(new string (*hp.ps)),i(hp.i) {}
    HasPtr& operator=(const HasPtr&);
private:
    string *ps;
    int i;
};

HasPtr& HasPtr::operator=(const HasPtr& hp){
    ps = new string (*hp.ps);
    return *this;
}

int main(){
    return 0;
}

13.11:
#include<iostream>
#include<string>
#include<fstream>
#include<vector>
#include<sstream>
#include<map>
#include<set>

using namespace std;

class HasPtr {
public:
    HasPtr(const string &s = string()) : ps(new string(s)),i(0) {}
    HasPtr(const HasPtr& hp):ps(new string (*hp.ps)),i(hp.i) {}
    HasPtr& operator=(const HasPtr&);
    ~HasPtr() {}
private:
    string *ps;
    int i;
};

HasPtr& HasPtr::operator=(const HasPtr& hp){
    ps = new string (*hp.ps);
    return *this;
}

int main(){
    return 0;
}

13.17:
#include<iostream>
#include<string>
#include<fstream>
#include<vector>
#include<sstream>
#include<map>
#include<set>

using namespace std;

class numbered{
public:
    numbered(){static int mysn1 = -1;mysn = ++mysn1;}
    numbered(numbered &a){mysn = a.mysn+1;}
    int mysn = 0;
};

void f(const numbered& s){cout<<s.mysn<<endl;}

int main(){
    numbered a,b = a,c = b;
    f(a);f(b);f(c);
    return 0;
}

13.22:
#include<iostream>
#include<string>
#include<fstream>
#include<vector>
#include<sstream>
#include<map>
#include<set>

using namespace std;

class Hasptr{
public:
    Hasptr();
    Hasptr(const Hasptr& hp) : sp(new string (*hp.sp)),i(hp.i){}
    Hasptr& operator=(const Hasptr& hp){
        auto new_ps = new string (*hp.sp);
        delete sp;
        sp = new_ps;
        return *this;
    }
    ~Hasptr();
private:
    string* sp;
    int i;
};

int main(){

    return 0;
}

13.27：
#include<iostream>
#include<string>
#include<fstream>
#include<vector>
#include<sstream>
#include<map>
#include<set>

using namespace std;

class Hasptr{
public:
    Hasptr(const string& s) : sp(new string (s)) ,i(0),use(new size_t(1)){}
    Hasptr(const Hasptr& hp) : sp(hp.sp),i(hp.i),use(hp.use){++*use;}
    Hasptr& operator=(const Hasptr& hp);
    ~Hasptr();
private:
    string* sp;
    int i;
    size_t* use;
};

Hasptr::~Hasptr(){
    if(--*use==0){
        delete sp;
        delete use;
    }
}

Hasptr& Hasptr::operator=(const Hasptr& hp){
    ++*hp.use;
    if(--*use==0){
        delete sp;
        delete use;
    }
    sp = hp.sp;
    use = hp.use;
    i = hp.i;
    return *this;
}

int main(){

    return 0;
}

13.30:
inline
void swap(Hasptr&lhp,Hasptr&rhp){
    using std::swap;
    cout<<"SWAP!"<<endl;
    swap(lhp.sp, rhp.sp);
    swap(lhp.i,rhp.i);
}

13.31:
#include<iostream>
#include<string>
#include<fstream>
#include<vector>
#include<sstream>
#include<map>
#include<set>

using namespace std;

class Hasptr{
public:
    friend void swap(Hasptr&,Hasptr&);
    friend bool operator<(const Hasptr&,const Hasptr&);
    friend void show(Hasptr&);
    Hasptr(const string& s) : sp(new string (s)) ,i(0),use(new size_t(1)){}
    Hasptr(const Hasptr& hp) : sp(hp.sp),i(hp.i),use(hp.use){++*use;}
    Hasptr& operator=(const Hasptr& hp);
    ~Hasptr();
private:
    string* sp;
    int i;
    size_t* use;
};

inline
void swap(Hasptr&lhp,Hasptr&rhp){
    using std::swap;
    cout<<"SWAP!"<<endl;
    swap(lhp.sp, rhp.sp);
    swap(lhp.i,rhp.i);
}

inline
bool operator<(const Hasptr& a,const Hasptr& b){
    return *a.sp<*b.sp;
}

inline
void show(Hasptr& hp){
    cout<<*hp.sp<<endl;
}

Hasptr::~Hasptr(){
    if(--*use==0){
        delete sp;
        delete use;
    }
}

Hasptr& Hasptr::operator=(const Hasptr& hp){
    ++*hp.use;
    if(--*use==0){
        delete sp;
        delete use;
    }
    sp = hp.sp;
    use = hp.use;
    i = hp.i;
    return *this;
}

int main(){
    vector<Hasptr> vec_hash;
    Hasptr A("A"),B("Z"),C("S");
    vec_hash.push_back(A);
    vec_hash.push_back(B);
    vec_hash.push_back(C);
    sort(vec_hash.begin(), vec_hash.end());
    for(auto &i:vec_hash){show(i);}
    return 0;
}

13.37:
#include<iostream>
#include<string>
#include<fstream>
#include<vector>
#include<sstream>
#include<map>
#include<set>

using namespace std;

class Message;

class Folder{
public:
    Folder();
    ~Folder();
    Folder(const Folder&);
    Folder& operator=(const Folder&);
    
    void addMsg(Message *m){
        messages.insert(m);
    }
    
    void remMsg(Message *m){
        messages.erase(m);
    }
private:
    set<Message*> messages;
};

class Message{
    friend class Folder;
    friend void swap(Message& lhs,Message &rhs);
public:
    explicit Message(const string &str = " "):contents(str) {}
    Message(const Message&);
    Message& operator=(const Message&);
    ~Message();
    void save(Folder&);
    void remove(Folder&);
private:
    string contents;
    set<Folder*> folders;
    void add_to_Folders(const Message&);
    void remove_from_Folders();
};

void Message::save(Folder &f){
    folders.insert(&f);
    f.addMsg(this);
}

void Message::remove(Folder &f){
    folders.erase(&f);
    f.remMsg(this);
}

void Message::add_to_Folders(const Message &m){
    for (auto f:m.folders){f->addMsg(this);}
}

Message::Message(const Message& m):contents(m.contents),folders(m.folders){
    add_to_Folders(m);
}

void Message::remove_from_Folders(){
    for(auto f:folders){f->remMsg(this);}
}

Message::~Message(){
    remove_from_Folders();
}

Message& Message::operator=(const Message &rhs){
    remove_from_Folders();
    contents = rhs.contents;
    folders = rhs.folders;
    add_to_Folders(rhs);
    return *this;
}

void swap(Message &lhs,Message& rhs){
    using std::swap;
    for (auto f:lhs.folders){
        f->remMsg(&lhs);
    }
    for (auto f:rhs.folders){
        f->remMsg(&rhs);
    }
    swap(lhs.contents, rhs.contents);
    swap(lhs.folders, rhs.folders);
    for(auto f:lhs.folders){
        f->addMsg(&lhs);
    }
    for(auto f:rhs.folders){
        f->addMsg(&rhs);
    }
}

int main(){
    return 0;
}

13.39:
//
//  Welcome back.cpp
//  Primer C++
//
//  Created by Violet on 2020/8/26.
//  Copyright © 2020 Violet. All rights reserved.
//

#include<iostream>
#include<string>
#include<fstream>
#include<vector>
#include<sstream>
#include<map>
#include<set>

using namespace std;

class StrVec{
public:
    StrVec():
    elements(nullptr),first_free(nullptr),cap(nullptr){}
    StrVec(const StrVec&);
    StrVec& operator=(const StrVec&);
    ~StrVec();
    void push_back(const string&);
    size_t size() const {return first_free - elements;}
    size_t capacity() const {return cap - elements;}
    string* begin() const {return elements;}
    string* end() const {return first_free;}
private:
    static allocator<string> alloc;
    void chk_n_alloc(){if (size() ==  capacity()) reallocate();}
    pair<string*, string*> alloc_n_copy (const string*,const string*);
    void free();
    void reallocate();
    string* elements;
    string* first_free;
    string* cap;
};

void StrVec::push_back(const string& s){
    chk_n_alloc();
    alloc.construct(first_free++, s);
}

pair<string*,string*>
StrVec::alloc_n_copy(const string *b, const string *e){
    auto data = alloc.allocate(e-b);
    return {data,uninitialized_copy(b, e, data)};
}

void StrVec::free(){
    if(elements){
        for(auto p = first_free;p!=elements;){
            alloc.destroy(--p);
        }
        alloc.deallocate(elements, cap-elements);
    }
}

StrVec::StrVec(const StrVec& s){
    auto newdata = alloc_n_copy(s.begin(), s.end());
    elements = newdata.first;
    first_free = cap = newdata.second;
}

StrVec::~StrVec(){free();}

StrVec &StrVec::operator=(const StrVec &s){
    auto data = alloc_n_copy(s.begin(), s.end());
    free();
    elements = data.first;
    first_free = cap = data.second;
    return *this;
}

void StrVec::reallocate(){
    auto newcapacity = size() ? 2*size() : 1;
    auto newdata = alloc.allocate(newcapacity);
    auto dest = newdata;
    auto elem = elements;
    for(size_t i = 0;i != size();++i){alloc.construct(dest++, std::move(*elem++));}
    free();
    elements = newdata;
    first_free = dest;
    cap = elements + newcapacity;
}

int main(){
    return 0;
}

