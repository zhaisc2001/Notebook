7.1:
#include<iostream>
#include<string>

using namespace std;

class Sales_data{
public:
    string isbn() const {return bookNO;}
    Sales_data& combine(const Sales_data&);
private:
    string bookNO;
    unsigned units_sold;
    double revenue;
};

Sales_data& Sales_data::combine(const Sales_data &a){
    units_sold += a.units_sold;
    revenue += a.revenue;
    return *this;
}

7.5:
#include<iostream>
#include<string>

using namespace std;

class Person{
public:
    string out_name() const{return name;}
    string out_address() const{return address;}
private:
    string name;
    string address;
};

int main(){
    return 0;
}

7.6:
Sales_data add(const Sales_data &a,const Sales_data &b){
    Sales_data c = a;
    c.combine(b);
    return c;
}

istream &read(istream &a,Sales_data &b){
    double price = 0;
    a >> b.bookNO >> b.units_sold >>price;
    b.revenue = price*b.units_sold;
    return a;
};

ostream &print(ostream &a,const Sales_data &b){
    a<<b.isbn()<<" "<< b.units_sold<< " "
    << b.revenue;
    return a;
}

7.11:
#include<iostream>
#include<string>

using namespace std;

class Sales_data{
public:
    string isbn() const {return bookNO;}
    Sales_data& combine(const Sales_data&);
    Sales_data() = default;
    Sales_data(istream &r);
    Sales_data(const string &s) : bookNO(s) {}
    Sales_data(const string &s,unsigned u,double r):
    bookNO(s),units_sold(u),revenue(u*r){}
private:
    string bookNO;
    unsigned units_sold;
    double revenue;
};

Sales_data& Sales_data::combine(const Sales_data &a){
    units_sold += a.units_sold;
    revenue += a.revenue;
    return *this;
}

int main(){
    return 0;
}

7.14:
#include<iostream>
#include<string>

using namespace std;

class Sales_data;
istream &read(istream&a,Sales_data &b);

class Sales_data{
public:
    string isbn() const {return bookNO;}
    Sales_data& combine(const Sales_data&);
    Sales_data() = default;
    Sales_data(istream &r){read(r, *this);};
    Sales_data(const string &s) : bookNO(s) {}
    Sales_data(const string &s,unsigned u,double r):
    bookNO(s),units_sold(u),revenue(u*r){}
    string bookNO;
    unsigned units_sold;
    double revenue;
};
istream &read(istream &a,Sales_data &b)
{
    a>>b.bookNO>>b.units_sold>>b.revenue;
    return a;
}
Sales_data& Sales_data::combine(const Sales_data &a){
    units_sold += a.units_sold;
    revenue += a.revenue;
    return *this;
}

int main(){
    Sales_data a;
    Sales_data b("Code Craft");
    Sales_data c("1984",22,57.96);
    Sales_data d(cin);
    return 0;
}

7.15:
#include<iostream>
#include<string>

using namespace std;

class Person;
istream &read(istream&a,Person &b);

class Person{
public:
    Person() = default;
    Person(const string &n):name(n){}
    Person(const string &n,const string &a):name(n),address(a){}
    Person(istream &r){read(r,*this);}
    string out_name() const{return name;}
    string out_address() const{return address;}
    string name;
    string address;
};

istream &read(istream&a,Person &b){
    a>>b.name>>b.address;
    return a;
}

int main(){
    return 0;
}

7.21:
#include<iostream>
#include<string>

using namespace std;

class Sales_data;
istream &read(istream&a,Sales_data &b);

class Sales_data{
    friend istream &read(istream&,Sales_data&);
public:
    string isbn() const {return bookNO;}
    Sales_data& combine(const Sales_data&);
    Sales_data() = default;
    Sales_data(istream &r){read(r, *this);};
    Sales_data(const string &s) : bookNO(s) {}
    Sales_data(const string &s,unsigned u,double r):
    bookNO(s),units_sold(u),revenue(u*r){}
private:
    string bookNO;
    unsigned units_sold;
    double revenue;
};
istream &read(istream &a,Sales_data &b)
{
    a>>b.bookNO>>b.units_sold>>b.revenue;
    return a;
}
Sales_data& Sales_data::combine(const Sales_data &a){
    units_sold += a.units_sold;
    revenue += a.revenue;
    return *this;
}

int main(){
    Sales_data a;
    Sales_data b("Code Craft");
    Sales_data c("1984",22,57.96);
    Sales_data d(cin);
    return 0;
}


7.22:
#include<iostream>
#include<string>

using namespace std;

class Person;
istream &read(istream&a,Person &b);

class Person{
    friend istream &read(istream&,Person&);
public:
    Person() = default;
    Person(const string &n):name(n){}
    Person(const string &n,const string &a):name(n),address(a){}
    Person(istream &r){read(r,*this);}
    string out_name() const{return name;}
    string out_address() const{return address;}
private:
    string name;
    string address;
};

istream &read(istream&a,Person &b){
    a>>b.name>>b.address;
    return a;
}

int main(){
    return 0;
}

7.23:
#include<iostream>
#include<string>

using namespace std;

class Screen{
public:
    typedef string::size_type pos;
    Screen() = default;
    Screen(pos ht,pos wd,char c):height(ht),width(wd),contents(ht*wd,c){}
    char get() const {return contents[cursor];};
private:
    pos height = 0;
    pos cursor = 0,width = 0;
    string contents;
};

int main(){
    return 0;
}

7.24:
#include<iostream>
#include<string>

using namespace std;

class Screen{
public:
    typedef string::size_type pos;
    Screen() = default;
    Screen(pos ht,pos wd,pos c):height(ht),width(wd),contents(c,' '){}
    Screen(pos ht,pos wd,char c):height(ht),width(wd),contents(ht*wd,c){}
    char get() const {return contents[cursor];};
private:
    pos height = 0;
    pos cursor = 0,width = 0;
    string contents;
};

int main(){
    return 0;
}

7.26:
#include<iostream>
#include<string>

using namespace std;

class Sales_data;
istream &read(istream&a,Sales_data &b);

class Sales_data{
    friend istream &read(istream&,Sales_data&);
public:
    double avg_price(Sales_data& item) const {return item.revenue/item.units_sold;}
    string isbn() const {return bookNO;}
    Sales_data& combine(const Sales_data&);
    Sales_data() = default;
    Sales_data(istream &r){read(r, *this);};
    Sales_data(const string &s) : bookNO(s) {}
    Sales_data(const string &s,unsigned u,double r):
    bookNO(s),units_sold(u),revenue(u*r){}
private:
    string bookNO;
    unsigned units_sold;
    double revenue;
};
istream &read(istream &a,Sales_data &b)
{
    a>>b.bookNO>>b.units_sold>>b.revenue;
    return a;
}
Sales_data& Sales_data::combine(const Sales_data &a){
    units_sold += a.units_sold;
    revenue += a.revenue;
    return *this;
}

int main(){
    Sales_data a;
    Sales_data b("Code Craft");
    Sales_data c("1984",22,57.96);
    Sales_data d(cin);
    return 0;
}

7.27:
#include<iostream>
#include<string>

using namespace std;

class Screen{
public:
    typedef string::size_type pos;
    Screen() = default;
    Screen(pos ht,pos wd,pos c):height(ht),width(wd),contents(c,' '){}
    Screen(pos ht,pos wd,char c):height(ht),width(wd),contents(ht*wd,c){}
    Screen& move(pos r,pos l){
        pos row = width*r;
        cursor = row+l;
        return *this;
    }
    char get(pos r,pos l) const {return contents[r*width+l];}
    char get() const {return contents[cursor];};
    Screen& display(ostream &o) {do_display(o);return *this;}
    const Screen& display(ostream &o) const {do_display(o);return *this;}
    Screen& set(char c){contents[cursor] = c;return *this;}
    Screen& set(pos r,pos l,char c){contents[r*width+l]=c;return *this;}
private:
    pos height = 0;
    pos cursor = 0,width = 0;
    string contents;
    void do_display(ostream &o) const {o<<contents;}
};

int main(){
    Screen myScreen(5,5,'X');
    myScreen.move(4, 0).set('#').display(cout);
    cout<<"\n";
    myScreen.display(cout);
    cout<<"\n";
    return 0;
}

7.31:
#include<iostream>

using namespace std;

class X;
class Y;

class X{Y* pointer_Y;};
class Y{X x;};

int main(){
    return 0;
}

7.32:
#include<iostream>
#include<string>
#include<vector>

using namespace std;

class Screen{
public:
    friend class Window_mgr;
    typedef string::size_type pos;
    Screen() = default;
    Screen(pos ht,pos wd,pos c):height(ht),width(wd),contents(c,' '){}
    Screen(pos ht,pos wd,char c):height(ht),width(wd),contents(ht*wd,c){}
    Screen& move(pos r,pos l){
        pos row = width*r;
        cursor = row+l;
        return *this;
    }
    char get(pos r,pos l) const {return contents[r*width+l];}
    char get() const {return contents[cursor];};
    Screen& display(ostream &o) {do_display(o);return *this;}
    const Screen& display(ostream &o) const {do_display(o);return *this;}
    Screen& set(char c){contents[cursor] = c;return *this;}
    Screen& set(pos r,pos l,char c){contents[r*width+l]=c;return *this;}
private:
    pos height = 0;
    pos cursor = 0,width = 0;
    string contents;
    void do_display(ostream &o) const {o<<contents;}
};

class Window_mgr{
public:
    typedef vector<Screen>::size_type ScreenIndex;
    void clear(ScreenIndex i){Screen &s = screens[i];s.contents=string(s.height*s.width,' ');};
private:
    vector<Screen> screens{Screen(24,80,' ')};
};

int main(){
    return 0;
}

7.43:
#include<iostream>

using namespace std;
class C;

class NoDefault{
    friend C;
    NoDefault(int a);
};

class C{
    NoDefault a;
    C(int b = 0):a(NoDefault(b)){}
};

int main(){
    return 0;
}

7.53:
#include<iostream>

using namespace std;

class Debug{
public:
    constexpr Debug(bool b = true):hw(b),io(b),other(b){}
    constexpr Debug(bool h,bool i,bool o):hw(h),io(i),other(o){}
    constexpr bool any() {return hw||io||other;}
    void set_io(bool b){io=b;}
    void set_hw(bool i){hw=i;}
    void set_other(bool o){other=o;}
private:
    bool io;
    bool hw;
    bool other;
};

int main(){
    return 0;
}

7.57:
#include<iostream>

using namespace std;

class Account{
public:
    static double rate(){return interestRate;}
    static void rate(double);
private:
    static double interestRate;
    static constexpr int period = 30;
    double daily_tbl[period];
};

int main(){
    return 0;
}
