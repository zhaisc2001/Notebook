12.1 12.2:
#include<iostream>
#include<string>
#include<vector>
#include<memory>

using namespace std;

class StrBlob{
public:
    typedef vector<string>::size_type size_type;
    StrBlob();
    StrBlob(initializer_list<string> il);
    size_type size() const {return data->size();}
    bool empty() const {return data->empty();}
    void push_back(const string &t){return data->push_back(t);}
    void pop_back();
    string& front();
    string& back();
private:
    shared_ptr<vector<string>> data;
    void check(size_type i,const string& msg) const {
        if (i >= data->size()){throw out_of_range(msg);}
    }
};

StrBlob::StrBlob(): data(make_shared<vector<string>>()) {}
StrBlob::StrBlob(initializer_list<string> il) : data(make_shared<vector<string>> (il)) {}

void StrBlob::pop_back(){
    check(0,"pop back on empty StrBlob");
    return data->pop_back();
}

string& StrBlob::front(){
    check(0,"front on empty StrBlob");
    return data->front();
}

string& StrBlob::back(){
    check(0,"back on empty StrBlob");
    return data->back();
}

int main() {
    StrBlob b1;
    {
        StrBlob b2 = {"a","an","the"};
        b1 = b2;
        b2.push_back("about");
    }
    cout<<b1.size()<<endl;
//    cout<<b2.size()<<endl;
    return 0;
}

12.6:
#include<iostream>
#include<vector>
#include<memory>

using namespace std;

vector<int>* vector_new(){
    auto i(new vector<int>);
    return i;
}

void vector_add(vector<int>* vec_ptr){
    int i;
    while(cin>>i){vec_ptr->push_back(i);}
}

void vector_out(vector<int>* vec_ptr){
    for(auto &i:*vec_ptr){cout<<i<<endl;}
}

int main() {
    auto i = vector_new();
    vector_add(i);
    vector_out(i);
    delete i;
    return 0;
}
