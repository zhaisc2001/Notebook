12.1 12.2:
#include<iostream>
#include<string>
#include<vector>
#include<memory>

using namespace std;

class StrBlob{
public:
    typedef vector<string>::size_type size_type;
    StrBlob();
    StrBlob(initializer_list<string> il);
    size_type size() const {return data->size();}
    bool empty() const {return data->empty();}
    void push_back(const string &t){return data->push_back(t);}
    void pop_back();
    string& front();
    string& back();
private:
    shared_ptr<vector<string>> data;
    void check(size_type i,const string& msg) const {
        if (i >= data->size()){throw out_of_range(msg);}
    }
};

StrBlob::StrBlob(): data(make_shared<vector<string>>()) {}
StrBlob::StrBlob(initializer_list<string> il) : data(make_shared<vector<string>> (il)) {}

void StrBlob::pop_back(){
    check(0,"pop back on empty StrBlob");
    return data->pop_back();
}

string& StrBlob::front(){
    check(0,"front on empty StrBlob");
    return data->front();
}

string& StrBlob::back(){
    check(0,"back on empty StrBlob");
    return data->back();
}

int main() {
    StrBlob b1;
    {
        StrBlob b2 = {"a","an","the"};
        b1 = b2;
        b2.push_back("about");
    }
    cout<<b1.size()<<endl;
//    cout<<b2.size()<<endl;
    return 0;
}

12.6:
#include<iostream>
#include<vector>
#include<memory>

using namespace std;

vector<int>* vector_new(){
    auto i(new vector<int>);
    return i;
}

void vector_add(vector<int>* vec_ptr){
    int i;
    while(cin>>i){vec_ptr->push_back(i);}
}

void vector_out(vector<int>* vec_ptr){
    for(auto &i:*vec_ptr){cout<<i<<endl;}
}

int main() {
    auto i = vector_new();
    vector_add(i);
    vector_out(i);
    delete i;
    return 0;
}

12.15:
[](connection *p) {disconnection *p;}

12.19:
#include<iostream>
#include<string>
#include<vector>
#include<memory>

using namespace std;

class StrBlobPtr;
class StrBlob;

class StrBlob{
public:
    typedef vector<string>::size_type size_type;
    StrBlob();
    StrBlob(initializer_list<string> il);
    friend class StrBlobPtr;
    size_type size() const {return data->size();}
    bool empty() const {return data->empty();}
    void push_back(const string &t){return data->push_back(t);}
    void pop_back();
    string& front();
    string& back();
private:
    shared_ptr<vector<string>> data;
    void check(size_type i,const string& msg) const {
        if (i >= data->size()){throw out_of_range(msg);}
    }
};

class StrBlobPtr{
public:
    StrBlobPtr():curr(0){}
    StrBlobPtr(StrBlob &a, size_t sz = 0) : wptr(a.data), curr(sz) {}\
    string& deref() const;
    StrBlobPtr& incr();
private:
    shared_ptr<vector<string>> check(size_t,const string &) const;
    weak_ptr<vector<string>> wptr;
    size_t curr;
};


StrBlob::StrBlob(): data(make_shared<vector<string>>()) {}
StrBlob::StrBlob(initializer_list<string> il) : data(make_shared<vector<string>> (il)) {}

shared_ptr<vector<string>> StrBlobPtr::check(size_t i, const string &msg) const {
    auto ret = wptr.lock();
    if(!ret){throw runtime_error("unbound StrBlobPtr");}
    if(i >= ret->size()){throw out_of_range(msg);}
    return ret;
}

string& StrBlobPtr::deref() const{
    auto p = check(curr,"dereference past end");
    return (*p)[curr];
}

StrBlobPtr& StrBlobPtr::incr() {
    check(curr, "increment past end of StrBlobPtr");
    ++curr;
    return *this;
}

void StrBlob::pop_back(){
    check(0,"pop back on empty StrBlob");
    return data->pop_back();
}

string& StrBlob::front(){
    check(0,"front on empty StrBlob");
    return data->front();
}

string& StrBlob::back(){
    check(0,"back on empty StrBlob");
    return data->back();
}

int main() {
    StrBlob b1;
    {
        StrBlob b2 = {"a","an","the"};
        b1 = b2;
        b2.push_back("about");
    }
    cout<<b1.size()<<endl;
    //    cout<<b2.size()<<endl;
    return 0;
}

12.23:
#include<iostream>
#include<string>
#include<vector>

using namespace std;

int main(){
    char* s1 = "a";
    char* s2 = "b";
    string p1 = "c";
    string p2 = "d";
    char *p = new char[strlen(s1)+strlen(s2)+1];
    strcpy(p, s1);
    strcat(p, s2);
    cout<<p<<endl;
    strcpy(p, (p1+p2).c_str());
    cout<<p<<endl;
    delete [] p;
    return 0;
}

12.24:
#include<iostream>
#include<string>
#include<vector>

using namespace std;

int main(){
    string s;
    cin>>s;
    char *p = new char[2];
    strcpy(p, s.c_str());
    cout<<p<<endl;
    delete [] p;
    return 0;
}

12.26:
#include<iostream>
#include<string>

using namespace std;

int main(){
    allocator<string> alloc_s;
    auto p = alloc_s.allocate(10);
    auto q = p;
    string s;
    while(cin>>s && q != p+10){alloc_s.construct(q++, s);}
    while(q != p){alloc_s.destroy(--q);}
    alloc_s.deallocate(p, 10);
    return 0;
}
